{"ast":null,"code":"var _jsxFileName = \"/Users/ningfei/domain-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from \"ethers\";\nimport contractAbi from './utils/contractABI.json';\nimport polygonLogo from './assets/polygonlogo.png';\nimport ethLogo from './assets/ethlogo.png';\nimport { networks } from './utils/networks'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'nffund';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`; // Add the domain you will be minting\n\nconst tld = '.ogg';\nconst CONTRACT_ADDRESS = '0x13Fb35c956125090a7c1FA071f4D626d077F2e70';\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [domain, setDomain] = useState('');\n  const [record, setRecord] = useState('');\n  const [network, setNetwork] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [editing, setEditing] = useState(false);\n  const [mints, setMints] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log('Make sure you have metamask!');\n      return;\n    } else {\n      console.log('We have the ethereum object', ethereum);\n    }\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log('Found an authorized account:', account);\n      setCurrentAccount(account);\n    } else {\n      console.log('No authorized account found');\n    } // retrieve network informations\n\n\n    const chainId = await ethereum.request({\n      method: 'eth_chainId'\n    });\n    setNetwork(networks[chainId]); // react on network change\n\n    ethereum.on('chainChanged', handleChainChanged); // reload page when network change\n\n    function handleChainChanged(_chainId) {\n      window.location.reload();\n    }\n  };\n\n  const mintDomain = async () => {\n    // Don't run if the domain is empty\n    if (!domain) {\n      return;\n    } // Alert the user if the domain is too short\n\n\n    if (domain.length < 3) {\n      alert('Domain must be at least 3 characters long');\n      return;\n    } // Calculate price based on length of domain (change this to match your contract)\t\n    // 3 chars = 0.5 MATIC, 4 chars = 0.3 MATIC, 5 or more = 0.1 MATIC\n\n\n    const price = domain.length === 3 ? '0.5' : domain.length === 4 ? '0.3' : '0.1';\n    console.log(\"Minting domain\", domain, \"with price\", price);\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let tx = await contract.register(domain, {\n          value: ethers.utils.parseEther(price)\n        }); // Wait for the transaction to be mined\n\n        const receipt = await tx.wait(); // Check if the transaction was successfully completed\n\n        if (receipt.status === 1) {\n          console.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\" + tx.hash); // Set the record for the domain\n\n          tx = await contract.setRecord(domain, record);\n          await tx.wait();\n          console.log(\"Record set! https://mumbai.polygonscan.com/tx/\" + tx.hash);\n          setRecord('');\n          setDomain('');\n        } else {\n          alert(\"Transaction failed! Please try again\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask -> https://metamask.io/\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const switchNetwork = async () => {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: '0x13881'\n          }]\n        });\n      } catch (error) {\n        if (error.code === 4092) {\n          // thhis error code means that chain has not been added to metamask\n          try {\n            await window.ethereum.request({\n              method: 'wallet_addEthereumChain',\n              params: [{\n                chainId: '0x13881',\n                chainName: 'Polygon Mumbai Testnet',\n                rpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\n                nativeCurrency: {\n                  name: \"Mumbai Matic\",\n                  symbol: \"MATIC\",\n                  decimals: 18\n                },\n                blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\n              }]\n            });\n          } catch (error) {\n            console.log(error);\n          }\n        }\n\n        console.log(error);\n      }\n    } else {\n      alert('MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html');\n    }\n  }; // Don\n  // Render methods\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connect-wallet-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"https://media.giphy.com/media/3ohhwytHcusSCXXOUg/giphy.gif\",\n      alt: \"ogg donut gif\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 3\n  }, this); // This will take us into edit mode and show us the edit buttons!\n\n\n  const editRecord = name => {\n    console.log(\"Editing record for\", name);\n    setEditing(true);\n    setDomain(name);\n  }; // Form to enter domain name and data\n\n\n  const renderInputForm = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"first-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: domain,\n          placeholder: \"domain\",\n          onChange: e => setDomain(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"tld\",\n          children: [\" \", tld, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: record,\n        placeholder: \"whats ur ogg power\",\n        onChange: e => setRecord(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          disabled: null,\n          onClick: null,\n          children: \"Mint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          disabled: null,\n          onClick: null,\n          children: \"Set data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 4\n    }, this);\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"left\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: \"OGG Name Service\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"subtitle\",\n              children: \"Your immortal API on the blockchain!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 5\n      }, this), !currentAccount && renderNotConnectedContainer(), currentAccount && renderInputForm(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"YS7TJmZBdDOzgiL5qYGd/LxN4Ws=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ningfei/domain-starter/src/App.js"],"names":["React","useEffect","useState","twitterLogo","ethers","contractAbi","polygonLogo","ethLogo","networks","TWITTER_HANDLE","TWITTER_LINK","tld","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","domain","setDomain","record","setRecord","network","setNetwork","loading","setLoading","editing","setEditing","mints","setMints","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","chainId","on","handleChainChanged","_chainId","location","reload","mintDomain","alert","price","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","tx","register","value","utils","parseEther","receipt","wait","status","hash","error","connectWallet","switchNetwork","params","code","chainName","rpcUrls","nativeCurrency","name","symbol","decimals","blockExplorerUrls","renderNotConnectedContainer","editRecord","renderInputForm","e","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,kBAAP;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,QAAT,QAAyB,kBAAzB,C,CAGA;;;AACA,MAAMC,cAAc,GAAG,QAAvB;AACA,MAAMC,YAAY,GAAI,uBAAsBD,cAAe,EAA3D,C,CACA;;AACA,MAAME,GAAG,GAAG,MAAZ;AACA,MAAMC,gBAAgB,GAAG,4CAAzB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACgB,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACoB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACsB,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACwB,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC,EAAD,CAAlC;;AACA,QAAM0B,wBAAwB,GAAG,YAAY;AAC5C,UAAM;AAAEC,MAAAA;AAAF,QAAeC,MAArB;;AAEA,QAAI,CAACD,QAAL,EAAe;AACdE,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA;AACA,KAHD,MAGO;AACND,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CH,QAA3C;AAEA;;AAED,UAAMI,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAvB;;AAEA,QAAIF,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AAC1B,YAAMC,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CK,OAA5C;AACAtB,MAAAA,iBAAiB,CAACsB,OAAD,CAAjB;AACA,KAJD,MAIO;AACNN,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,KAnB2C,CAqB3C;;;AACA,UAAMM,OAAO,GAAG,MAAMT,QAAQ,CAACK,OAAT,CAAiB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB,CAAtB;AACAd,IAAAA,UAAU,CAACb,QAAQ,CAAC8B,OAAD,CAAT,CAAV,CAvB2C,CAyB3C;;AACAT,IAAAA,QAAQ,CAACU,EAAT,CAAY,cAAZ,EAA4BC,kBAA5B,EA1B2C,CA4B3C;;AAEA,aAASA,kBAAT,CAA4BC,QAA5B,EAAsC;AACrCX,MAAAA,MAAM,CAACY,QAAP,CAAgBC,MAAhB;AACA;AAGF,GAnCD;;AAqCA,QAAMC,UAAU,GAAG,YAAY;AAC9B;AACA,QAAI,CAAC5B,MAAL,EAAa;AAAE;AAAQ,KAFO,CAG9B;;;AACA,QAAIA,MAAM,CAACoB,MAAP,GAAgB,CAApB,EAAuB;AACtBS,MAAAA,KAAK,CAAC,2CAAD,CAAL;AACA;AACA,KAP6B,CAQ9B;AACA;;;AACA,UAAMC,KAAK,GAAG9B,MAAM,CAACoB,MAAP,KAAkB,CAAlB,GAAsB,KAAtB,GAA8BpB,MAAM,CAACoB,MAAP,KAAkB,CAAlB,GAAsB,KAAtB,GAA8B,KAA1E;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BhB,MAA9B,EAAsC,YAAtC,EAAoD8B,KAApD;;AACC,QAAI;AACL,YAAM;AAAEjB,QAAAA;AAAF,UAAeC,MAArB;;AACA,UAAID,QAAJ,EAAc;AACZ,cAAMkB,QAAQ,GAAG,IAAI3C,MAAM,CAAC4C,SAAP,CAAiBC,YAArB,CAAkCpB,QAAlC,CAAjB;AACA,cAAMqB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,QAAQ,GAAG,IAAIhD,MAAM,CAACiD,QAAX,CAAoBzC,gBAApB,EAAsCP,WAAW,CAACiD,GAAlD,EAAuDJ,MAAvD,CAAjB;AAEAnB,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACA,YAAIuB,EAAE,GAAG,MAAMH,QAAQ,CAACI,QAAT,CAAkBxC,MAAlB,EAA0B;AAACyC,UAAAA,KAAK,EAAErD,MAAM,CAACsD,KAAP,CAAaC,UAAb,CAAwBb,KAAxB;AAAR,SAA1B,CAAf,CANY,CAOZ;;AACA,cAAMc,OAAO,GAAG,MAAML,EAAE,CAACM,IAAH,EAAtB,CARY,CAUZ;;AACA,YAAID,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B;AACzB/B,UAAAA,OAAO,CAACC,GAAR,CAAY,sDAAoDuB,EAAE,CAACQ,IAAnE,EADyB,CAGzB;;AACAR,UAAAA,EAAE,GAAG,MAAMH,QAAQ,CAACjC,SAAT,CAAmBH,MAAnB,EAA2BE,MAA3B,CAAX;AACA,gBAAMqC,EAAE,CAACM,IAAH,EAAN;AAEA9B,UAAAA,OAAO,CAACC,GAAR,CAAY,mDAAiDuB,EAAE,CAACQ,IAAhE;AAEA5C,UAAAA,SAAS,CAAC,EAAD,CAAT;AACAF,UAAAA,SAAS,CAAC,EAAD,CAAT;AACA,SAXD,MAYK;AACJ4B,UAAAA,KAAK,CAAC,sCAAD,CAAL;AACA;AACF;AACC,KA7BD,CA8BA,OAAMmB,KAAN,EAAY;AACbjC,MAAAA,OAAO,CAACC,GAAR,CAAYgC,KAAZ;AACE;AACF,GA7CD;;AAiDC,QAAMC,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAM;AAAEpC,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACbgB,QAAAA,KAAK,CAAC,sCAAD,CAAL;AACA;AACD;;AAED,YAAMZ,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;AAEAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,QAAQ,CAAC,CAAD,CAAjC;AACAlB,MAAAA,iBAAiB,CAACkB,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACD,KAZD,CAYE,OAAO+B,KAAP,EAAc;AACdjC,MAAAA,OAAO,CAACC,GAAR,CAAYgC,KAAZ;AACD;AACF,GAhBD;;AAkBA,QAAME,aAAa,GAAG,YAAY;AACnC,QAAIpC,MAAM,CAACD,QAAX,EAAqB;AACpB,UAAI;AACH,cAAMC,MAAM,CAACD,QAAP,CAAgBK,OAAhB,CAAwB;AAC7BC,UAAAA,MAAM,EAAE,4BADqB;AAE7BgC,UAAAA,MAAM,EAAE,CAAC;AAAE7B,YAAAA,OAAO,EAAE;AAAX,WAAD;AAFqB,SAAxB,CAAN;AAIA,OALD,CAKE,OAAO0B,KAAP,EAAc;AACf,YAAIA,KAAK,CAACI,IAAN,KAAe,IAAnB,EAAyB;AACxB;AACA,cAAI;AACH,kBAAMtC,MAAM,CAACD,QAAP,CAAgBK,OAAhB,CAAwB;AAC7BC,cAAAA,MAAM,EAAE,yBADqB;AAE7BgC,cAAAA,MAAM,EAAE,CACP;AACC7B,gBAAAA,OAAO,EAAE,SADV;AAEC+B,gBAAAA,SAAS,EAAE,wBAFZ;AAGCC,gBAAAA,OAAO,EAAE,CAAC,oCAAD,CAHV;AAICC,gBAAAA,cAAc,EAAE;AACfC,kBAAAA,IAAI,EAAE,cADS;AAEfC,kBAAAA,MAAM,EAAE,OAFO;AAGfC,kBAAAA,QAAQ,EAAE;AAHK,iBAJjB;AASCC,gBAAAA,iBAAiB,EAAE,CAAC,iCAAD;AATpB,eADO;AAFqB,aAAxB,CAAN;AAgBA,WAjBD,CAiBE,OAAOX,KAAP,EAAc;AACfjC,YAAAA,OAAO,CAACC,GAAR,CAAYgC,KAAZ;AACA;AACD;;AACDjC,QAAAA,OAAO,CAACC,GAAR,CAAYgC,KAAZ;AACA;AACD,KAhCD,MAgCO;AACNnB,MAAAA,KAAK,CAAC,iGAAD,CAAL;AACA;AACD,GApCC,CAhHgB,CAsJlB;AAOC;;;AACA,QAAM+B,2BAA2B,GAAG,mBACnC;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA,4BACC;AAAK,MAAA,GAAG,EAAC,4DAAT;AAAsE,MAAA,GAAG,EAAC;AAA1E;AAAA;AAAA;AAAA;AAAA,YADD,eAGC;AAAQ,MAAA,OAAO,EAAEX,aAAjB;AAAgC,MAAA,SAAS,EAAC,kCAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD,CA9JiB,CAwKjB;;;AACA,QAAMY,UAAU,GAAIL,IAAD,IAAU;AAC5BzC,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCwC,IAAlC;AACA/C,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAR,IAAAA,SAAS,CAACuD,IAAD,CAAT;AACA,GAJD,CAzKiB,CA+KjB;;;AACA,QAAMM,eAAe,GAAG,MAAK;AAC5B,wBACC;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACC;AACC,UAAA,IAAI,EAAC,MADN;AAEC,UAAA,KAAK,EAAE9D,MAFR;AAGC,UAAA,WAAW,EAAC,QAHb;AAIC,UAAA,QAAQ,EAAE+D,CAAC,IAAI9D,SAAS,CAAC8D,CAAC,CAACC,MAAF,CAASvB,KAAV;AAJzB;AAAA;AAAA;AAAA;AAAA,gBADD,eAOC;AAAG,UAAA,SAAS,EAAC,KAAb;AAAA,0BAAqB9C,GAArB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPD;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAWC;AACC,QAAA,IAAI,EAAC,MADN;AAEC,QAAA,KAAK,EAAEO,MAFR;AAGC,QAAA,WAAW,EAAC,oBAHb;AAIC,QAAA,QAAQ,EAAE6D,CAAC,IAAI5D,SAAS,CAAC4D,CAAC,CAACC,MAAF,CAASvB,KAAV;AAJzB;AAAA;AAAA;AAAA;AAAA,cAXD,eAkBC;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACC;AAAQ,UAAA,SAAS,EAAC,wBAAlB;AAA2C,UAAA,QAAQ,EAAE,IAArD;AAA2D,UAAA,OAAO,EAAE,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAIC;AAAQ,UAAA,SAAS,EAAC,wBAAlB;AAA2C,UAAA,QAAQ,EAAE,IAArD;AAA2D,UAAA,OAAO,EAAE,IAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJD;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AA8BA,GA/BD;;AAiCAxD,EAAAA,SAAS,CAAC,MAAM;AACf2B,IAAAA,wBAAwB;AACxB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACC;AAAA,iCACC;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,oCACC;AAAG,cAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAG,cAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cADD,EAUE,CAACd,cAAD,IAAmB8D,2BAA2B,EAVhD,EAYE9D,cAAc,IAAIgE,eAAe,EAZnC,eAcC;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACC;AAAK,UAAA,GAAG,EAAC,cAAT;AAAwB,UAAA,SAAS,EAAC,cAAlC;AAAiD,UAAA,GAAG,EAAE3E;AAAtD;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AACC,UAAA,SAAS,EAAC,aADX;AAEC,UAAA,IAAI,EAAEO,YAFP;AAGC,UAAA,MAAM,EAAC,QAHR;AAIC,UAAA,GAAG,EAAC,YAJL;AAAA,oBAKG,eAAcD,cAAe;AALhC;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cAdD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AA4BA,CAjPD;;GAAMI,G;;KAAAA,G;AAmPN,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport {ethers} from \"ethers\";\nimport contractAbi from './utils/contractABI.json';\nimport polygonLogo from './assets/polygonlogo.png';\nimport ethLogo from './assets/ethlogo.png';\nimport { networks } from './utils/networks';\n\n\n// Constants\nconst TWITTER_HANDLE = 'nffund';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// Add the domain you will be minting\nconst tld = '.ogg';\nconst CONTRACT_ADDRESS = '0x13Fb35c956125090a7c1FA071f4D626d077F2e70';\n\nconst App = () => {\n\tconst [currentAccount, setCurrentAccount] = useState('');\n\tconst [domain, setDomain] = useState('');\n\tconst [record, setRecord] = useState('');\n\tconst [network, setNetwork] = useState('');\n\tconst [loading, setLoading] = useState(false);\n\tconst [editing, setEditing] = useState(false);\n\tconst [mints, setMints] = useState([]);\n\tconst checkIfWalletIsConnected = async () => {\n\t\tconst { ethereum } = window;\n\n\t\tif (!ethereum) {\n\t\t\tconsole.log('Make sure you have metamask!');\n\t\t\treturn;\n\t\t} else {\n\t\t\tconsole.log('We have the ethereum object', ethereum);\n\n\t\t}\n\n\t\tconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\n\t\tif (accounts.length !== 0) {\n\t\t\tconst account = accounts[0];\n\t\t\tconsole.log('Found an authorized account:', account);\n\t\t\tsetCurrentAccount(account);\n\t\t} else {\n\t\t\tconsole.log('No authorized account found');\n\t\t}\n\n\t\t\t// retrieve network informations\n\t\t\tconst chainId = await ethereum.request({ method: 'eth_chainId' });\n\t\t\tsetNetwork(networks[chainId]);\n\t\n\t\t\t// react on network change\n\t\t\tethereum.on('chainChanged', handleChainChanged);\n\t\n\t\t\t// reload page when network change\n\t\n\t\t\tfunction handleChainChanged(_chainId) {\n\t\t\t\twindow.location.reload();\n\t\t\t}\n\t\n\t\t\n\t};\n\n\tconst mintDomain = async () => {\n\t\t// Don't run if the domain is empty\n\t\tif (!domain) { return }\n\t\t// Alert the user if the domain is too short\n\t\tif (domain.length < 3) {\n\t\t\talert('Domain must be at least 3 characters long');\n\t\t\treturn;\n\t\t}\n\t\t// Calculate price based on length of domain (change this to match your contract)\t\n\t\t// 3 chars = 0.5 MATIC, 4 chars = 0.3 MATIC, 5 or more = 0.1 MATIC\n\t\tconst price = domain.length === 3 ? '0.5' : domain.length === 4 ? '0.3' : '0.1';\n\t\tconsole.log(\"Minting domain\", domain, \"with price\", price);\n\t  try {\n\t\tconst { ethereum } = window;\n\t\tif (ethereum) {\n\t\t  const provider = new ethers.providers.Web3Provider(ethereum);\n\t\t  const signer = provider.getSigner();\n\t\t  const contract = new ethers.Contract(CONTRACT_ADDRESS, contractAbi.abi, signer);\n\t\n\t\t\t\tconsole.log(\"Going to pop wallet now to pay gas...\")\n\t\t  let tx = await contract.register(domain, {value: ethers.utils.parseEther(price)});\n\t\t  // Wait for the transaction to be mined\n\t\t\t\tconst receipt = await tx.wait();\n\t\n\t\t\t\t// Check if the transaction was successfully completed\n\t\t\t\tif (receipt.status === 1) {\n\t\t\t\t\tconsole.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\"+tx.hash);\n\t\t\t\t\t\n\t\t\t\t\t// Set the record for the domain\n\t\t\t\t\ttx = await contract.setRecord(domain, record);\n\t\t\t\t\tawait tx.wait();\n\t\n\t\t\t\t\tconsole.log(\"Record set! https://mumbai.polygonscan.com/tx/\"+tx.hash);\n\t\t\t\t\t\n\t\t\t\t\tsetRecord('');\n\t\t\t\t\tsetDomain('');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\talert(\"Transaction failed! Please try again\");\n\t\t\t\t}\n\t\t}\n\t  }\n\t  catch(error){\n\t\tconsole.log(error);\n\t  }\n\t}\n\n\n\t\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask -> https://metamask.io/\");\n        return;\n      }\n\t\t\t\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      \n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const switchNetwork = async () => {\n\tif (window.ethereum) {\n\t\ttry {\n\t\t\tawait window.ethereum.request({\n\t\t\t\tmethod: 'wallet_switchEthereumChain',\n\t\t\t\tparams: [{ chainId: '0x13881' }],\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tif (error.code === 4092) {\n\t\t\t\t// thhis error code means that chain has not been added to metamask\n\t\t\t\ttry {\n\t\t\t\t\tawait window.ethereum.request({\n\t\t\t\t\t\tmethod: 'wallet_addEthereumChain',\n\t\t\t\t\t\tparams: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tchainId: '0x13881',\n\t\t\t\t\t\t\t\tchainName: 'Polygon Mumbai Testnet',\n\t\t\t\t\t\t\t\trpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\n\t\t\t\t\t\t\t\tnativeCurrency: {\n\t\t\t\t\t\t\t\t\tname: \"Mumbai Matic\",\n\t\t\t\t\t\t\t\t\tsymbol: \"MATIC\",\n\t\t\t\t\t\t\t\t\tdecimals: 18\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tblockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t})\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(error);\n\t\t}\n\t} else {\n\t\talert('MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html');\n\t}\n}\n\n// Don\n\t\t\n\n\t\n\n\n\n\t// Render methods\n\tconst renderNotConnectedContainer = () => (\n\t\t<div className=\"connect-wallet-container\">\n\t\t\t<img src=\"https://media.giphy.com/media/3ohhwytHcusSCXXOUg/giphy.gif\" alt=\"ogg donut gif\" />\n      {/* Call the connectWallet function we just wrote when the button is clicked */}\n\t\t\t<button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n\t\t\t\tConnect Wallet\n\t\t\t</button>\n\t\t</div>\n\t);\n\t\n\t// This will take us into edit mode and show us the edit buttons!\n\tconst editRecord = (name) => {\n\t\tconsole.log(\"Editing record for\", name);\n\t\tsetEditing(true);\n\t\tsetDomain(name);\n\t}\n\n\t// Form to enter domain name and data\n\tconst renderInputForm = () =>{\n\t\treturn (\n\t\t\t<div className=\"form-container\">\n\t\t\t\t<div className=\"first-row\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={domain}\n\t\t\t\t\t\tplaceholder='domain'\n\t\t\t\t\t\tonChange={e => setDomain(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<p className='tld'> {tld} </p>\n\t\t\t\t</div>\n\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tvalue={record}\n\t\t\t\t\tplaceholder='whats ur ogg power'\n\t\t\t\t\tonChange={e => setRecord(e.target.value)}\n\t\t\t\t/>\n\n\t\t\t\t<div className=\"button-container\">\n\t\t\t\t\t<button className='cta-button mint-button' disabled={null} onClick={null}>\n\t\t\t\t\t\tMint\n\t\t\t\t\t</button>  \n\t\t\t\t\t<button className='cta-button mint-button' disabled={null} onClick={null}>\n\t\t\t\t\t\tSet data\n\t\t\t\t\t</button>  \n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t);\n\t}\n  \n\tuseEffect(() => {\n\t\tcheckIfWalletIsConnected();\n\t}, []);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t<header>\n\t\t\t\t\t\t<div className=\"left\">\n\t\t\t\t\t\t\t<p className=\"title\">OGG Name Service</p>\n\t\t\t\t\t\t\t<p className=\"subtitle\">Your immortal API on the blockchain!</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</header>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t{!currentAccount && renderNotConnectedContainer()}\n\t\t\t\t{/* Render the input form if an account is connected */}\n\t\t\t\t{currentAccount && renderInputForm()}\n\t\t\t\t\n\t\t\t\t<div className=\"footer-container\">\n\t\t\t\t\t<img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>{`built with @${TWITTER_HANDLE}`}</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}