{"ast":null,"code":"var _jsxFileName = \"/Users/ningfei/domain-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from 'ethers';\nimport contractABI from './utils/contractABI.json'; // At the very top of the file, after the other imports\n\nimport polygonLogo from './assets/polygonlogo.png';\nimport ethLogo from './assets/ethlogo.png';\nimport { networks } from './utils/networks'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'nffund';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst tld = '.ogg';\nconst CONTRACT_ADDRESS = '0x13Fb35c956125090a7c1FA071f4D626d077F2e70';\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [domain, setDomain] = useState('');\n  const [record, setRecord] = useState('');\n  const [network, setNetwork] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [editing, setEditing] = useState(false);\n  const [mints, setMints] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    } // check if we have access to wallete\n\n\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n\n    if (accounts.length !== 0) {\n      // if there is multiple account grabd the first one\n      const account = accounts[0];\n      console.log(\"Found an account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    } // retrieve network informations\n\n\n    const chainId = await ethereum.request({\n      method: 'eth_chainId'\n    });\n    setNetwork(networks[chainId]); // react on network change\n\n    ethereum.on('chainChanged', handleChainChanged); // reload page when network change\n\n    function handleChainChanged(_chainId) {\n      window.location.reload();\n    }\n  };\n\n  const fetchMints = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI.abi, signer);\n        const names = await contract.getAllNames(); // For each name , get record and address\n\n        const mintRecords = await Promise.all(names.map(async name => {\n          const mintRecord = await contract.records(name);\n          const owner = await contract.domains(name);\n          return {\n            id: names.indexOf(name),\n            name: name,\n            record: mintRecord,\n            owner: owner\n          };\n        }));\n        console.log('MINTS fetched', mintRecords);\n        setMints(mintRecords);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const mintDomain = async () => {\n    // Don't run if domain is empty\n    if (!domain) {\n      return;\n    }\n\n    if (domain.length < 3) {\n      alert('Domain must be at least 3 characters long!');\n      return;\n    } // Calculate price based on length of domain (change this to match your contract)\t\n    // 3 chars = 0.5 MATIC, 4 chars = 0.3 MATIC, 5 or more = 0.1 MATIC\n\n\n    const price = domain.length === 3 ? '0.5' : domain.length === 4 ? '0.3' : '0.1';\n    console.log(\"Minting domain\", domain, \"with price\", price);\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI.abi, signer);\n        console.log('Going to pop wallet to sign transaction');\n        let tx = await contract.register(domain, {\n          value: ethers.utils.parseEther(price)\n        });\n        const receipt = await tx.wait();\n\n        if (receipt.status === 1) {\n          console.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\" + tx.hash);\n          tx = await contract.setRecord(domain, record);\n          await tx.wait();\n          console.log('Record set!  https://mumbai.polygonscan.com/tx/' + tx.hash); // call fetchMints after 2 seconds\n\n          setTimeout(() => {\n            fetchMints();\n          }, 2000);\n          setDomain('');\n          setRecord('');\n        } else {\n          alert(\"Transaction failed, try again\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const updateDomain = async () => {\n    if (!record || !domain) {\n      return;\n    }\n\n    setLoading(true);\n    console.log(\"Updating domain\", domain, \"with record\", record);\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI.abi, signer);\n        console.log('Going to pop wallet to sign transaction');\n        let tx = await contract.setRecord(domain, record);\n        await tx.wait();\n        console.log(\"Record set https://mumbai.polygonscan.com/tx/\" + tx.hash);\n        fetchMints();\n        setRecord('');\n        setDomain('');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    setLoading(false);\n  };\n\n  const cancelUpdateDomain = async () => {\n    setRecord('');\n    setDomain('');\n    setEditing(false);\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Metamask is required: https://metamask.io\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log(\"Connected:\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const switchNetwork = async () => {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: '0x13881'\n          }]\n        });\n      } catch (error) {\n        if (error.code === 4092) {\n          // thhis error code means that chain has not been added to metamask\n          try {\n            await window.ethereum.request({\n              method: 'wallet_addEthereumChain',\n              params: [{\n                chainId: '0x13881',\n                chainName: 'Polygon Mumbai Testnet',\n                rpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\n                nativeCurrency: {\n                  name: \"Mumbai Matic\",\n                  symbol: \"MATIC\",\n                  decimals: 18\n                },\n                blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\n              }]\n            });\n          } catch (error) {\n            console.log(error);\n          }\n        }\n\n        console.log(error);\n      }\n    } else {\n      alert('MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html');\n    }\n  }; // function to render if wallet is not connected\n\n\n  const renderNotConnectedWallet = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connect-wallet-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"https://media.giphy.com/media/3ohhwytHcusSCXXOUg/giphy.gif\",\n      alt: \"ogg donut gif\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 3\n  }, this); // This will take us into edit mode and show us the edit buttons!\n\n\n  const editRecord = name => {\n    console.log(\"Editing record for\", name);\n    setEditing(true);\n    setDomain(name);\n  };\n\n  const renderMints = () => {\n    if (currentAccount && mints.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mint-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"subtitle\",\n          children: \" Recently minted domains!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mint-list\",\n          children: mints.map((mint, index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mint-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mint-row\",\n                children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                  className: \"link\",\n                  href: `https://testnets.opensea.io/assets/mumbai/${CONTRACT_ADDRESS}/${mint.id}`,\n                  target: \"_blank\",\n                  rel: \"noopener noreferrer\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"underlined\",\n                    children: [' ', mint.name, tld, ' ']\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 249,\n                    columnNumber: 12\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 11\n                }, this), mint.owner.toLowerCase() === currentAccount.toLowerCase() ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"edit-button\",\n                  onClick: () => editRecord(mint.name),\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"edit-icon\",\n                    src: \"https://img.icons8.com/metro/26/000000/pencil.png\",\n                    alt: \"Edit button\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 13\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 12\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\" \", mint.record, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 10\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 9\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 5\n      }, this);\n    }\n  };\n\n  const renderInputForm = () => {\n    // If not on Polygon Mumbai Testnet, render \"Please connect to Polygon Mumbai Testnet\"\n    if (network !== 'Polygon Mumbai Testnet') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connect-wallet-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please switch to the Polygon Mumbai Testnet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          onClick: switchNetwork,\n          children: \"Click here to switch\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 5\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"first-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: domain,\n          placeholder: \"domain\",\n          onChange: e => setDomain(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"tld\",\n          children: [\" \", tld, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: record,\n        placeholder: \"wazzup\",\n        onChange: e => setRecord(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 5\n      }, this), editing ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          disabled: loading,\n          onClick: updateDomain,\n          children: \"Set record\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button mint-button\",\n          onClick: cancelUpdateDomain,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"cta-button mint-button\",\n        disabled: null,\n        onClick: mintDomain,\n        children: \"Mint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 4\n    }, this);\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  useEffect(() => {\n    if (network === 'Polygon Mumbai Testnet') {\n      fetchMints();\n    }\n  }, [currentAccount, network]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"left\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: \"OGG Name Service\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"subtitle\",\n              children: \"Highlander API on the blockchain!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"right ethereum-address\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              alt: \"Network logo\",\n              className: \"logo\",\n              src: network.includes(\"Polygon\") ? polygonLogo : ethLogo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 8\n            }, this), currentAccount ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\" Wallet: \", currentAccount.slice(0, 6), \"...\", currentAccount.slice(-4), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 26\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \" Not connected \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 103\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 5\n      }, this), !currentAccount && renderNotConnectedWallet(), currentAccount && renderInputForm(), mints && renderMints(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built by @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"RdUadMFUfnskvsiT1OPbTs5CAGU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ningfei/domain-starter/src/App.js"],"names":["React","useEffect","useState","twitterLogo","ethers","contractABI","polygonLogo","ethLogo","networks","TWITTER_HANDLE","TWITTER_LINK","tld","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","domain","setDomain","record","setRecord","network","setNetwork","loading","setLoading","editing","setEditing","mints","setMints","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","chainId","on","handleChainChanged","_chainId","location","reload","fetchMints","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","names","getAllNames","mintRecords","Promise","all","map","name","mintRecord","records","owner","domains","id","indexOf","error","mintDomain","alert","price","tx","register","value","utils","parseEther","receipt","wait","status","hash","setTimeout","updateDomain","cancelUpdateDomain","connectWallet","switchNetwork","params","code","chainName","rpcUrls","nativeCurrency","symbol","decimals","blockExplorerUrls","renderNotConnectedWallet","editRecord","renderMints","mint","index","toLowerCase","renderInputForm","e","target","includes","slice"],"mappings":"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","sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from 'ethers';\nimport contractABI from './utils/contractABI.json';\n// At the very top of the file, after the other imports\nimport polygonLogo from './assets/polygonlogo.png';\nimport ethLogo from './assets/ethlogo.png';\nimport { networks } from './utils/networks';\n\n\n// Constants\nconst TWITTER_HANDLE = 'nffund';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst tld = '.ogg';\nconst CONTRACT_ADDRESS = '0x13Fb35c956125090a7c1FA071f4D626d077F2e70';\n\nconst App = () => {\n\n\tconst [currentAccount, setCurrentAccount] = useState('');\n\tconst [domain, setDomain] = useState('');\n\tconst [record, setRecord] = useState('');\n\tconst [network, setNetwork] = useState('');\n\tconst [loading, setLoading] = useState(false);\n\tconst [editing, setEditing] = useState(false);\n\tconst [mints, setMints] = useState([]);\n\n\n\tconst checkIfWalletIsConnected = async () => {\n\t\tconst { ethereum } = window;\n\t\tif (!ethereum) {\n\t\t\tconsole.log(\"Make sure you have metamask\");\n\t\t\treturn;\n\t\t} else {\n\t\t\tconsole.log(\"We have the ethereum object\", ethereum);\n\t\t}\n\n\t\t// check if we have access to wallete\n\t\tconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\t\tif (accounts.length !== 0) {\n\t\t\t// if there is multiple account grabd the first one\n\t\t\tconst account = accounts[0];\n\t\t\tconsole.log(\"Found an account:\", account);\n\t\t\tsetCurrentAccount(account);\n\t\t} else {\n\t\t\tconsole.log(\"No authorized account found\");\n\t\t}\n\t\t// retrieve network informations\n\t\tconst chainId = await ethereum.request({ method: 'eth_chainId' });\n\t\tsetNetwork(networks[chainId]);\n\n\t\t// react on network change\n\t\tethereum.on('chainChanged', handleChainChanged);\n\n\t\t// reload page when network change\n\n\t\tfunction handleChainChanged(_chainId) {\n\t\t\twindow.location.reload();\n\t\t}\n\n\t}\n\n\tconst fetchMints = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI.abi, signer);\n\n\t\t\t\tconst names = await contract.getAllNames();\n\n\t\t\t\t// For each name , get record and address\n\t\t\t\tconst mintRecords = await Promise.all(names.map(async (name) => {\n\t\t\t\t\tconst mintRecord = await contract.records(name);\n\t\t\t\t\tconst owner = await contract.domains(name);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: names.indexOf(name),\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\trecord: mintRecord,\n\t\t\t\t\t\towner: owner,\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tconsole.log('MINTS fetched', mintRecords);\n\t\t\t\tsetMints(mintRecords);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\tconst mintDomain = async () => {\n\t\t// Don't run if domain is empty\n\t\tif (!domain) { return }\n\t\tif (domain.length < 3) {\n\t\t\talert('Domain must be at least 3 characters long!');\n\t\t\treturn;\n\t\t}\n\t\t// Calculate price based on length of domain (change this to match your contract)\t\n\t\t// 3 chars = 0.5 MATIC, 4 chars = 0.3 MATIC, 5 or more = 0.1 MATIC\n\t\tconst price = domain.length === 3 ? '0.5' : domain.length === 4 ? '0.3' : '0.1';\n\t\tconsole.log(\"Minting domain\", domain, \"with price\", price);\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI.abi, signer);\n\n\t\t\t\tconsole.log('Going to pop wallet to sign transaction');\n\t\t\t\tlet tx = await contract.register(domain, { value: ethers.utils.parseEther(price) });\n\t\t\t\tconst receipt = await tx.wait();\n\t\t\t\tif (receipt.status === 1) {\n\t\t\t\t\tconsole.log(\"Domain minted! https://mumbai.polygonscan.com/tx/\" + tx.hash);\n\n\t\t\t\t\ttx = await contract.setRecord(domain, record);\n\t\t\t\t\tawait tx.wait();\n\t\t\t\t\tconsole.log('Record set!  https://mumbai.polygonscan.com/tx/' + tx.hash);\n\t\t\t\t\t// call fetchMints after 2 seconds\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tfetchMints();\n\t\t\t\t\t}, 2000);\n\t\t\t\t\tsetDomain('');\n\t\t\t\t\tsetRecord('');\n\t\t\t\t} else {\n\t\t\t\t\talert(\"Transaction failed, try again\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tconst updateDomain = async () => {\n\t\tif (!record || !domain) { return; }\n\t\tsetLoading(true);\n\t\tconsole.log(\"Updating domain\", domain, \"with record\", record);\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\t\tif (ethereum) {\n\t\t\t\tconst provider = new ethers.providers.Web3Provider(ethereum);\n\t\t\t\tconst signer = provider.getSigner();\n\t\t\t\tconst contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI.abi, signer);\n\n\t\t\t\tconsole.log('Going to pop wallet to sign transaction');\n\t\t\t\tlet tx = await contract.setRecord(domain, record);\n\t\t\t\tawait tx.wait();\n\t\t\t\tconsole.log(\"Record set https://mumbai.polygonscan.com/tx/\" + tx.hash);\n\t\t\t\tfetchMints();\n\t\t\t\tsetRecord('');\n\t\t\t\tsetDomain('');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t\tsetLoading(false);\n\t}\n\n\tconst cancelUpdateDomain = async () => {\n\t\tsetRecord('');\n\t\tsetDomain('');\n\t\tsetEditing(false);\n\t}\n\n\tconst connectWallet = async () => {\n\t\ttry {\n\t\t\tconst { ethereum } = window;\n\t\t\tif (!ethereum) {\n\t\t\t\talert(\"Metamask is required: https://metamask.io\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n\t\t\tconsole.log(\"Connected:\", accounts[0]);\n\t\t\tsetCurrentAccount(accounts[0]);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t}\n\n\tconst switchNetwork = async () => {\n\t\tif (window.ethereum) {\n\t\t\ttry {\n\t\t\t\tawait window.ethereum.request({\n\t\t\t\t\tmethod: 'wallet_switchEthereumChain',\n\t\t\t\t\tparams: [{ chainId: '0x13881' }],\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tif (error.code === 4092) {\n\t\t\t\t\t// thhis error code means that chain has not been added to metamask\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait window.ethereum.request({\n\t\t\t\t\t\t\tmethod: 'wallet_addEthereumChain',\n\t\t\t\t\t\t\tparams: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tchainId: '0x13881',\n\t\t\t\t\t\t\t\t\tchainName: 'Polygon Mumbai Testnet',\n\t\t\t\t\t\t\t\t\trpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\n\t\t\t\t\t\t\t\t\tnativeCurrency: {\n\t\t\t\t\t\t\t\t\t\tname: \"Mumbai Matic\",\n\t\t\t\t\t\t\t\t\t\tsymbol: \"MATIC\",\n\t\t\t\t\t\t\t\t\t\tdecimals: 18\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tblockExplorerUrls: [\"https://mumbai.polygonscan.com/\"]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t})\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t} else {\n\t\t\talert('MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html');\n\t\t}\n\t}\n\n\t// function to render if wallet is not connected\n\tconst renderNotConnectedWallet = () => (\n\t\t<div className=\"connect-wallet-container\">\n\t\t\t\t\t<img src=\"https://media.giphy.com/media/3ohhwytHcusSCXXOUg/giphy.gif\" alt=\"ogg donut gif\" />\n\t\t\t<button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n\t\t\t\tConnect Wallet\n\t\t\t</button>\n\t\t</div>\n\t);\n\n\n\t// This will take us into edit mode and show us the edit buttons!\n\tconst editRecord = (name) => {\n\t\tconsole.log(\"Editing record for\", name);\n\t\tsetEditing(true);\n\t\tsetDomain(name);\n\t}\n\n\n\tconst renderMints = () => {\n\t\tif (currentAccount && mints.length > 0) {\n\t\t\treturn (\n\t\t\t\t<div className=\"mint-container\">\n\t\t\t\t\t<p className=\"subtitle\"> Recently minted domains!</p>\n\t\t\t\t\t<div className=\"mint-list\">\n\t\t\t\t\t\t{mints.map((mint, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className=\"mint-item\" key={index}>\n\t\t\t\t\t\t\t\t\t<div className='mint-row'>\n\t\t\t\t\t\t\t\t\t\t<a className=\"link\" href={`https://testnets.opensea.io/assets/mumbai/${CONTRACT_ADDRESS}/${mint.id}`} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\t\t\t\t\t\t<p className=\"underlined\">{' '}{mint.name}{tld}{' '}</p>\n\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t{/* If mint.owner is currentAccount, add an \"edit\" button*/}\n\t\t\t\t\t\t\t\t\t\t{mint.owner.toLowerCase() === currentAccount.toLowerCase() ?\n\t\t\t\t\t\t\t\t\t\t\t<button className=\"edit-button\" onClick={() => editRecord(mint.name)}>\n\t\t\t\t\t\t\t\t\t\t\t\t<img className=\"edit-icon\" src=\"https://img.icons8.com/metro/26/000000/pencil.png\" alt=\"Edit button\" />\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<p> {mint.record} </p>\n\t\t\t\t\t\t\t\t</div>)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>);\n\t\t}\n\t};\n\n\n\n\t\n\n\tconst renderInputForm = () => {\n\t\t// If not on Polygon Mumbai Testnet, render \"Please connect to Polygon Mumbai Testnet\"\n\t\tif (network !== 'Polygon Mumbai Testnet') {\n\t\t\treturn (\n\t\t\t\t<div className=\"connect-wallet-container\">\n\t\t\t\t\t<p>Please switch to the Polygon Mumbai Testnet</p>\n\t\t\t\t\t<button className='cta-button mint-button' onClick={switchNetwork}>Click here to switch</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<div className='form-container'>\n\t\t\t\t<div className='first-row'>\n\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\tvalue={domain}\n\t\t\t\t\t\tplaceholder='domain'\n\t\t\t\t\t\tonChange={e => setDomain(e.target.value)} />\n\t\t\t\t\t<p className='tld'> {tld} </p>\n\t\t\t\t</div>\n\n\t\t\t\t<input type=\"text\"\n\t\t\t\t\tvalue={record}\n\t\t\t\t\tplaceholder='wazzup'\n\t\t\t\t\tonChange={e => setRecord(e.target.value)} />\n\t\t\t\t{editing ? (\n\t\t\t\t\t<div className='button-container'>\n\t\t\t\t\t\t{ /* This will call the updateDomain function we just made */}\n\t\t\t\t\t\t<button className='cta-button mint-button' disabled={loading} onClick={updateDomain}>\n\t\t\t\t\t\t\tSet record\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t{ /*} This will let us get out of editing mode by setting editing to false */}\n\t\t\t\t\t\t<button className='cta-button mint-button' onClick={cancelUpdateDomain}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<button className='cta-button mint-button' disabled={null} onClick={mintDomain}>\n\t\t\t\t\t\tMint\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t)\n\t};\n\tuseEffect(() => {\n\t\tcheckIfWalletIsConnected();\n\t}, []);\n\tuseEffect(() => {\n\t\tif (network === 'Polygon Mumbai Testnet') {\n\t\t\tfetchMints();\n\t\t}\n\t}, [currentAccount, network]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\n\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t<header>\n\t\t\t\t\t\t<div className=\"left\">\n\t\t\t\t\t\t\t<p className=\"title\">OGG Name Service</p>\n\t\t\t\t\t\t\t<p className=\"subtitle\">Highlander API on the blockchain!</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='right ethereum-address'>\n\t\t\t\t\t\t\t<img alt=\"Network logo\" className=\"logo\" src={network.includes(\"Polygon\") ? polygonLogo : ethLogo} />\n\t\t\t\t\t\t\t{currentAccount ? <p> Wallet: {currentAccount.slice(0, 6)}...{currentAccount.slice(-4)} </p> : <p> Not connected </p>}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</header>\n\t\t\t\t</div>\n\n\t\t\t\t{!currentAccount && renderNotConnectedWallet()}\n\t\t\t\t{currentAccount && renderInputForm()}\n\t\t\t\t{mints && renderMints()}\n\t\t\t\t<div className=\"footer-container\">\n\t\t\t\t\t<img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>{`built by @${TWITTER_HANDLE}`}</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}